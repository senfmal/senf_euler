"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from re import X
import StopWatch as sw
import toolkit as tk

stopper = sw.StopWatch("Euler problem 0012 'Highly divisible triangular number' - Solution")
max = 500



def getDivisors(num:int) -> list:
    divisors = []
    for div in range(num, 0, -1):
        if num % div == 0:
            divisors.append(int(num / div))
    return divisors

def f(L, nMax=45000):
    d = [0]*nMax
    for n in range(1, nMax):
        for j in range(n, nMax, n):
            d[j]+= 1
        nDiv = d[n-1]*d[n//2] if n%2==0 else d[(n-1)//2]*d[n]
        if nDiv > L: return (n-1)*n//2

def solution01():
    for _ in range(int(input())):
        print (f(int(input())))   

def solutionXX():
    triangles = tk.triangleGenerator()
    start = 1
    for x in range(2,501):
        start *= x 
    print(start)
    while True:
        start_triangle = next(triangles)
        if start_triangle >= start:
            break
    print(start_triangle)

    while True:
        divisors = getDivisors(triangle)
        print("{0}: {1}".format(triangle, ', '.join(str(div) for div in divisors)))
        triangle = next(triangles)
        if len(divisors) >= max:
            break

if __name__ == '__main__':
    stopper.startNewStopper("Solution 1")
    solution01()
    stopper.stopCurrentWatch()
    print(stopper)